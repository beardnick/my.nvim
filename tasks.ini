# vim: set noet fenc=utf-8 sts=4 sw=4 ts=4 ft=dosini:

# define a new task named "file-compile"
[file-compile]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=gcc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp=gcc "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" ; "$(VIM_FILEDIR)"/"$(VIM_FILENOEXT)"
command:python=python "$(VIM_FILEPATH)"
command:java=javac "$(VIM_FILEPATH)"; java "$(VIM_PATHNOEXT)"
command:make=make -f "$(VIM_FILEPATH)"
command:javascript=node "$(VIM_FILEPATH)"
command:sh=sh "$(VIM_FILEPATH)"
command:lua=lua "$(VIM_FILEPATH)"
command:perl=perl "$(VIM_FILEPATH)"
command:ruby=ruby "$(VIM_FILEPATH)"
command:fish=fish "$(VIM_FILEPATH)"
command:php=php "$(VIM_FILEPATH)"
command:erlang=escript "$(VIM_FILEPATH)"
command:go=go run "$(VIM_FILEPATH)"
command:cuda=nvcc "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"; "$(VIM_PATHNOEXT)"
command:ruby=ruby  "$(VIM_FILEPATH)"


output=terminal

cwd=$(VIM_FILEDIR)

save=1

